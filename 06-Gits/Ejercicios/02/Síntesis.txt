EXCEPCIONES

Gestión de errores mediante excepciones
Cortan el flujo del programa y van derramando de función en función hasta llegar a main.
Si main no las agarra, se encarga el sistema operativo
Todas derivan de Exception, que es parte de CLR
Ventajas
	-> Se dejan de usar códigos de error númericos o 'defines'
	-> Se declaran en archivos independientes
	-> Se les asignan mensajes de error significativos
	-> Tienen nombres significativos en sí mismas
	-> Pueden contener información pertinente al tipo de excepción
try catch para separar código según lo que ocurre (más fácil de entenderlo)
"Aquí se lanza la excepción"
Tipos de catch por excepción
Si no encuentra el tipo de catch (no tiene el base), va bajando en el stack de llamadas
Si encuentra, se reanuda la ejecución desde el catch pertinente
El catch general (Exception e) debe ser el último bloque catch
Throw para lanzar excepciones on demand
Solo se puede throwear derivantes de Exception
Se suelen lanzar con un string y una innerException como argumentos
finally corre si el try tuvo éxito o si saltó la excepción
finally sirve para evitar repetir código y para liberar recursos
Fijarse bien en los tipos de excepciones y recorrido del stack

-------------------------------------------------------------

TEST UNITARIOS

Diseño -> Armado -> Test -> Aprender 	-> Diseño
Escribir casos de prueba en un entorno aislado del programa real
Pruebas integrales es una prueba de todo junto
Pruebas funcionales son pruebas de funciones separadas
Se agrega un proyecto de tipo test unitario
[TestClass] y [TestMethod]
AAA
	-> Arrange = Crear e inicializar
	-> Act = Poner a correr alguna función
	-> Assert = Ver que los resultados sean correctos
Clase Assert
	-> Métodos estáticos
	-> Trabajan con booleanos para chequar resultados
	-> Determina si se pasa un test o no
	-> También puede ser manejado desde la etiqueta [ExpectedException(typeof(----))]
[Timeout(----)]
Para ejecutar pruebas: Ejecutar -> Todas las pruebas

-------------------------------------------------------------

GENERICS

Clases "parametrizadas"
Tipado fuerte en una clase, pero sin saber de antemano qué tipo de dato
Parece poder tener cantidad infinita de generics
Leer bien las T, como si fuese una clase cualquiera
Restricciones
	-> where T :	struct		<- tipo de valor (implica restricción new())
			class		<- tipo de referencia
			unmanaged	<- ni tipo de referencia, ni referencia adentro (implica struct)
			[Clase]
			[Interfaz]
			new()		<- Que tenga constructor por defecto
			U		<- Debe ser o derivar de U (definir antes restricción de U)
Si implica, no se puede combinar
Todos los tipos de valor deben tener constructor sin argumentos accesible
Método genérico puede estar dentro de una clase no genérica
Para heredar
	Clase<T> puede heredar de otra clase <T> o <int>
	Una clase no genérica no puede heredar de una clase <T>
	Una clase no genérica si puede heredar de una clase <int>
	Clase<T> no puede heredar de una clase<T,U>
	Como regla general, no se puede heredar cuando falta un tipo de la clase que se está heredando
Más de una restricción
	class NodeItem<T> where T : System.IComparable<T>, new() { }
	class SpecialNodeItem<T> : NodeItem<T> where T : System.IComparable<T>, new() { }
	class SuperKeyType<K, V, U>
    		where U : System.IComparable<U>
    		where V : new() { }
typeof(T).Name para sacar el nombre de una clase dentro de la clase genérica

-------------------------------------------------------------

INTERFACES

Implementar una interfaz obliga a implementar sus métodos
Las interfaces describen qué debe hacer una clase, pero la clase define cómo en la implementación
Las interfaces:
	No pueden tener variables
	Pueden tener propiedades sin implementación
	Todos los métodos públicos (implícito)
Se puede implementar más de una interfaz
Están para parchear la falta de herencia múltiple
Se las llama INombre -> La I por convención
Para implementar interfaz en una clase derivada, primero la clase, despues las interfaces
	class Clase : ClaseParent, IInterfaz {}
No se usa override para implementar los métodos abstractos de la interfaz porque no usan "abstract"
	Todos los métodos abstractos (implícito)
Los métodos se declaran -> [tipo] [nombre]();
La implementación también es [tipo] [nombre]();
Implementación explícita
	IInterfaz.Método() {}
	No se pueden sobreescribir en clases que deriven de la clase donde se define
	Solo cambia la firma donde se implementa

-------------------------------------------------------------

ARCHIVOS

StreamWriter para escribir	-> En System.IO
	(string path)
	(string path, bool append)
	(string path, bool append, Encoding encoding)
	Write(string s) -> Escribe en archivo sin \n
	WriteLine(string s) -> Escribe con \n
	Close() -> Cierra sw
	Si no existe el archivo, lo crea
	No crea carpetas
StreamReader para leer		-> En System.IO
	(string path)
	(string path, Encoding encoding) y algunos con buffers
	Read() -> Un caracter
	ReadLine() -> Una línea
	ReadToEnd() -> Todo	-> No requiere while porque es una sola lectura
	Los reads se pasan a un string
	while ((linea = sr.ReadLine()) != null)
Estos tiran excepciones de de argumento, o archivo/carpeta cuando no encuentra o no puede leer
Bloque using para declarar y liberar un StreamWriter/Reader
File.Exists(string path) 	Devuelve verdadero si existe y puede leer. Falso si falla como sea
File.Copy(string s1, string s2) Copia un archivo en otro
File.Delete(string path) 	Borra
Directory.Delete(string path)	Borra carpeta si está vacía
		(string path, boolean) Borra si el boolean es true
Directory.Exists(string path)
Directory.CreateDirectory(string path) -> Crea todos los subdirectorios
Environment.GetFolderPath(Environment.SpecialFolder._____)

-------------------------------------------------------------

SERIALIZACIÓN

Convertir un objeto en memoria a texto de forma estandarizada
Para leerlo más tarde, en otro programa, o en otra máquina, o subirlo a una base de datos
Serialización binaria incluye las privadas también
Para leerlo se "deserializa"
Serialización XML
	En System.Xml.Serialization
	Incluye atributos y propiedades públicas L/E
	Incluye colecciones de solo lectura, porque puede acceder a sus .Add
	Debe tener constructor por defecto
	No serializa métodos
"No es texto plano sin formato", a pesar de que es literalmente un txt sin formato
new XmlSerializer(typeof(----))
.Serialize(stream, object) y .Deserialize(stream)
	Se debe castear cuando se lee -> variable = (Dato)xmlser.Deserialize(reader)
Sigue estandar 1.0 de W3C de XML
Especificaciones XML Schema Part 2: Datatypes
La serialización depende de tener el .dll creado con la clase donde se serializa
XmlTextWriter o StreamWriter, ambas con el path
Para serializar una clase derivada -> etiqueta [XmlInclude(typeof(Derivada))] en la clase parent
Para escribir
	XmlSerializer(tipo)
	Stream/XmlTextWriter(path)
	Serialize(stream, objeto)
Para leer
	XmlSerializer(tipo)
	Stream/XmlTextReader(path)
	Deserialize(stream) y a una variable
Los readers y writers se cierran (.Close())
OpenFileDialog openFileDialog
	.Filter = "Archivo|*.xml";

Serialización Binaria
	Se pone la etiqueta [Serializable] en la clase a serializar
	En System.Runtime.Serialization.Formatters.Binary
	Puede serializar variables y propiedades privadas
	Debe tener constructor por defecto
	BinaryFormatter()
		.Serialize(FileStream, object) y .Deserialize(FileStream)
	FileStream(string path, System.IO.Mode mode)
	.Read(byte[] array, int offset, int count)	| ???
	.Seek(long offset, IO.SeekOrigin origin)	| ???
	.Write(byte[] array, int offset, int count)	| ???
	También se debe castear cuando se lee a variable
	También se debe cerrar (.Close())

-------------------------------------------------------------

SQL

La Connection String especifica los datos de una conexión
Ej:	"DataSource=[Instancia del servidor];
	 InitialCatalog=[Nombre de la base de datos];
	 IntegratedSecurity=true";
Properties.Settings.Default.[NombreConexión] <- De tipo Conexión
SqlConnection con argumento ConnectionString en constructor
SqlCommand
	.CommandType
	.CommandText
	.Connection
La conexión se abre y se cierra
SqlDataReader dr = comando.ExecuteReader()
	Esto devuelve algo, si tiene algo
Ciclo while dr.Read() para bajar todo
Actualizar -> "UPDATE Personas SET nombre='Fer', apellido='Perez' WHERE id = 1";
Bajar -> "SELECT nombre FROM Personas"
	 "SELECT * FROM Personas"
Subir -> "INSERT INTO Personas (nombre) VALUES('Pedro')"
Borrar -> DELETE FROM Personas WHERE id = 1"
comando.ExecuteNonQuery() Para cuando no se espera a que devuelva algo

SqlDataAdapter
	.InsertCommand
	.UpdateCommand
	.DeleteCommand
	SelectCommand y conexión en el constructor
	Todos comandos separados dentro de la misma clase
Se puede crear los 3 comandos con constructores = new SqlCommand(consulta, conexión)
.Fill(datatable) para ejectuar el SelectCommand y actualizar al estado de la base
UnoDeLos4Command.Parameters.Add([nombre del parámetro en el comando], Tipo SQL, tamaño, nombre columna)
Los DataTable se manejan por Rows
DataRow dataRow = this.dataTable.NewRow() para crear un row
Las bajadas son en Object, hay que parsearlas o usar .ToString()
DataRowState
Los datos de un Row se ubican con indexador o con datarow["nombre"]
-------------------------------------------------------------

THREADS

También llamado hilo de ejecución o subproceso
"Tareas encadenadas que se pueden ejecutar en cualquier SO"
Se usa para ejecutar más de una tarea al mismo tiempo
Los hilos de ejecución comparten recursos, se manejan por interrupciones
El proceso sigue en ejecución mientras al menos uno de sus hilos siga activo
Los recursos se liberan cuando mueren todos los threads
En System.Threading
Se crea un Thread, se le pasa un método en el constructor
	Corre con .Start()
Se le pasa un constructor new ParameterizedThreadStart(Metodo) dentro del constructor del thread para threads parametrizados
	Se corren con .Start(parámetro acá)
Para modificar un control de WF desde fuera de su "dueño"
	if label.InvokeRequired
		label.BeginInvoke(MethodInvoker delegado)
	else
		Se cambia normalmente
Abort(), IsAlive, Join(), Resume()

-------------------------------------------------------------

EVENTOS

Se declaran mediante delegados
Sirven para notificar a una parte del programa que ocurrió algo y entonces ejecutar código
El uso más común es en las interfaces gráficas
Son mensajes enviados por un objeto para indicar que se ocurrió algo
	Puede ser por interacción del usuario con el programa
	Puede ser por diseño en el código, sin que lo esté activando directamente el usuario
Cada evento tiene un "emisor" que lo produce y un "receptor" o "manejador" que lo captura
El emisor no sabe qué harán sus manejadores y cómo
Para conectar el emisor y el manejador se usan delegados
El delegado encapsula método/s y se llama de forma anónima.
	Cuando la ejecución llega al evento, este corre todos los delegados que se le han asignado
	Si no tiene delegados asignados va a lanzar OutOfRangeException
Los delegados son parametrizados para pasar información a sus manejadores
Un evento puede tener más de un manejador
Un manejador puede estar en más de un evento
Acción -> Al delegado -> Al manejador/es
Se le suma un manejador con obj.evento += Manejador
Se sacan de un evento con obj.evento -= Manejador

Orden
	Declarar delegado -> [modificador] delegate [tipo] [nombre] (args);
	Declarar evento	  -> public event [nombre del delegado] [nombre];
	Correr ("Asignar" evento) -> this.evento(argumentos)
	Crear manejador -> [modificador] [static/no static] [mismo tipo] nombre (mismos args) {}
	Agregar a instancia.evento

-------------------------------------------------------------

METODOS DE EXTENSIÓN

Sirven para "agregar" funcionalidad a clases ya compiladas
Son como llamar a métodos estáticos que toman un objeto de esa clase como parámetro
	Pero se las llama como si fuesen de instancia
Se definen como estáticos
public static int Metodo(this [tipo] [nombre])
	Permite llamarlo desde cualquier objeto de tipo [tipo]
Todos los parámetros siguientes en ese método son parámetros que se deben pasar para su llamada como un método normal
Solo se pueden usar cuando se importó el namespace con "using [namespace]"
Sirven para clases e interfaces

-------------------------------------------------------------

PRUEBA

0 - Nombre en MessageBox
3 - No serializa/deserializa nada
4 - No muestra el mensaje
7 - Mal la ejecución + el error de tipeo
8 - Mal la consulta + hacer 3 métodos de extensión